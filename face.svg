<?xml version="1.0" encoding="utf-8"?>
<svg
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   viewBox="0 0 200 200"
   height="200"
   width="200">
  <style>
    svg {
      stroke: #000;
      stroke-width: 5;
      stroke-linejoin: round;
    }
    .face {
      fill: #edd400;
    }
    .iris {
      fill: #fff;
    }
    .pupil {
      fill: #000;
      stroke: none;
    }
    .mouth {
      fill: #ef2929;
      transition: transform 1s;
    }
  </style>
  <ellipse
     id="face"
     class="face"
     cx="100"
     cy="100"
     rx="80"
     ry="80" />
  <circle
     id="iris-left"
     class="iris"
     cx="70"
     cy="80"
     r="20" />
  <circle
     id="iris-right"
     class="iris"
     cx="130"
     cy="80"
     r="20" />
  <circle
     id="pupil-left"
     class="pupil"
     cx="70"
     cy="80"
     r="10" />
  <circle
     id="pupil-right"
     class="pupil"
     cx="130"
     cy="80"
     r="10" />
  <path
     id="mouth"
     class="mouth"
     style="transform-origin: 100px 120px"
     vector-effect="non-scaling-stroke"
     d="m 50,120 c 0,10 20,30 50,30 30,0 50,-20 50,-30 z" />
  <script>
    'use strict'
    var MouthAnimator = {
      // Iterations per second.
      nomsPerSecond: 2,
      // Current mouth size. Ranges from 0 to 1 inclusive.
      scaleY: 1,
      // When false, the animation will stop before its next iteration.
      keepGoing: false,
      // True when the mouth is expanding, false when it is contracting.
      isOpening: false,
      // Time of previous frame in milliseconds. This is null if and only if
      // the animation is not running.
      lastFrame: null,
      // Add the specified delta to scaleY.
      // Returns true when we need to change direction.
      updateScaleY(delta) {
        this.scaleY += delta
        this.scaleY = Math.max(0, Math.min(1, this.scaleY))
        document.getElementById('mouth').setAttribute('transform', `scale(1, ${this.scaleY})`)
        return this.scaleY == 0 || this.scaleY == 1
      },
      // Step the animation, given the current time in milliseconds.
      tick(time) {
        var progress = time - (this.lastFrame || time)
        var delta = progress / 1000 * 2 * this.nomsPerSecond
        if (this.isOpening) {
          // Widen the mouth
          if (this.updateScaleY(delta)) {
            this.isOpening = false
            // Only stop animating when the mouth is open
            if (!this.keepGoing) {
              this.lastFrame = null
              return
            }
          }
        } else {
          // Narrow the mouth
          if (this.updateScaleY(-delta)) {
            this.isOpening = true
          }
        }
        this.lastFrame = time
        window.requestAnimationFrame(this.tick.bind(this))
      },
      // Start the animation, if it's not running already.
      start() {
        this.keepGoing = true
        if (!this.lastFrame) {
          window.requestAnimationFrame(this.tick.bind(this))
        }
      },
      // Stop the animation before the next cycle.
      stop() {
        this.keepGoing = false
      },
      // Set the rate of mouth movement.
      setNomsPerSecond(value) {
        this.nomsPerSecond = value
      },
    }
  </script>
</svg>
